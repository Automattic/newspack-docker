volumes:
  ## Kludge for not having the ./docker directory bound recursively
  dockerdirectory:

services:
  ## A default mysql image
  ## We map a local directory (data/mysql) so we can have the mysql data locally
  ## and reuse it if we need to remove containers and images for rebuilding from scratch.
  db:
    image: mariadb:10.8.2
    volumes:
      - ./data/newspack-dev_mysql:/var/lib/mysql
      - ./logs/newspack-dev/mysql:/var/log/mysql
      - ./config/mysql.conf:/etc/mysql/conf.d/docker.cnf
      - ./bin:/var/scripts
    env_file:
      - default.env
      - .env
    entrypoint: [ '/bin/bash', '/var/scripts/docker-db-start-and-autoupgrade.sh' ]
    command: [ 'mysqld' ]

  ## - The container wordpress is a very basic but custom container with WordPress and all of the tools we need
  ##   for development.
  ## - The container will be named jetpack_wordpress for easy reference when running docker/docker-compose commands
  ##
  ## Here we map the following:
  ##  - The docker/wordpress-develop directory where we'll get WordPress source code with unit tests
  ##  - The docker/wordpress directory so we can have WordPress source code modifiable from the host file system
  ##  - The docker/logs/apache2 directory so we can access Apache log files directly from the host file system
  ##  - The docker/logs/php directory so we can access PHP log files directly from the host file system
  ##  - The docker/bin directory for provisioning scripts
  wordpress:
    container_name: newspack_dev
    platform: linux/arm64
    depends_on:
      - db
    image: newspack-dev-74:latest
    volumes:
      # - ./wordpress-develop:/tmp/wordpress-develop
      - ./logs/newspack-dev/apache2/:/var/log/apache2
      - ./logs/newspack-dev/php:/var/log/php
      - ./bin:/var/scripts
      - ./repos:/newspack-repos
      - ./html:/var/www/html
      - ./manager-html:/var/www/manager-html
      - ./additional-sites-html:/var/www/additional-sites-html
      - ./snapshots:/snapshots
    ports:
      - "${PORT_WORDPRESS:-80}:80"
      - "${PORT_WORDPRESS:-443}:443"
    env_file:
      - default.env
      - .env
    environment:
      - HOST_PORT=${PORT_WORDPRESS:-80}
     # - COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME
      - APACHE_RUN_USER=${USE_CUSTOM_APACHE_USER:-www-data}
      # Ensure network requests run via host machine proxy.
      - ALL_PROXY=socks5h://host.docker.internal:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"
  mailhog:
    image: arjenz/mailhog:latest
    restart: always
    ports:
      - 1025:1025
      - 8025:8025
  adminer:
    image: adminer
    restart: always
    ports:
      - 8088:8080
