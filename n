#!/bin/bash

NABSPATH="$(dirname "${BASH_SOURCE[0]}")"
source "$(dirname "${BASH_SOURCE[0]}")/bin/repos.sh"

# Infer the current working project from the current folder;
projects=("${newspack_plugins[@]}" "newspack-theme") # create a new list with the appended value
target_folder=""
for plugin in "${projects[@]}"; do
    if [[ "$PWD" == *"$plugin"* ]]; then
        target_folder=$plugin
    fi
done

path_param=""
current_site_path="/var/www/html"
current_site_relative_path="html"
# if current working folder is a folder inside the additional-sites folder, set the current_site to it
# if I am inside this folder several levels, return only the name of the first folder after additional-sites
if [[ "$PWD" == *"additional-sites-html"* ]]; then
    current_site=$(echo $PWD | sed -e 's/.*additional-sites-html\///' | cut -d'/' -f1)
    current_site_path="/var/www/additional-sites-html/$current_site"
    current_site_relative_path="additional-sites-html/$current_site"
    path_param="--path=$current_site_path"
fi

cd "$(dirname "$0")"
source .env

if [ $# -eq 0 ]; then
	echo "No arguments provided"
	exit 1
fi

if [ ! -z "$USE_CUSTOM_APACHE_USER" ]
then
    USER_COMMAND="--user $USE_CUSTOM_APACHE_USER "
else
    USER_COMMAND=""
fi

require_target_folder() {
    if [[ -z "$target_folder" ]]; then
        echo "Error: You must be inside one of the repos to run this command." >&2
        exit 1
    fi
}

start() {
    file="docker-compose.yml"
        if [ "$2" == "8.0" ]; then
            file="docker-compose-80.yml"
        fi
        if [ "$2" == "7.4" ]; then
            file="docker-compose-74.yml"
        fi
        docker-compose -f $file up -d
}
stop() {
    docker-compose down
}

case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    sh)
        docker exec -it $USER_COMMAND newspack_dev /bin/bash
        ;;
    rsh)
        docker exec -it newspack_dev /bin/bash
        ;;
    cd-install)
        echo "This will install the ncd command in your system. Please inform the file you want to add this to (e.g. .bashrc)"
        read -e -p "> $HOME/" file
        target="$HOME/$file"
        snippet="source $NABSPATH/bin/ncd.sh"
        if grep -Fxq "$snippet" $target
        then
            echo "ncd is already installed on $target"
        else
            echo "NEWSPACK_DOCKER_ROOT=$NABSPATH" >> $target
            echo $snippet >> $target
            echo "ncd installed!"
            echo
            echo "Restart your terminal or run 'source $target' to start using it"
            echo
            echo "To use it, just type 'ncd <folder>'"
            echo "It will look for matches on the repos folder, the additional-sites-html folder and the plugins folder of the main site"
        fi
        ;;
    install)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/install.sh $current_site_path"
        ;;
    uninstall)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/uninstall.sh $current_site_path"
        ;;
    reset-site)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/reset-site.sh $current_site_path"
        ;;
    tail)
        tail -f $current_site_relative_path/wp-content/debug.log
        ;;
    wp)
        cmd="wp --allow-root $path_param ${@:2}"
        docker exec -it $USER_COMMAND newspack_dev $cmd
        ;;
    db)
        docker exec -it $USER_COMMAND newspack_dev sh -c "wp db cli --allow-root $path_param"
        ;;
    shell)
        docker exec -it $USER_COMMAND newspack_dev sh -c "wp shell --allow-root $path_param"
        ;;
    install-manager)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/install-manager.sh"
        ;;
    setup-manager)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/init-wp-manager.sh"
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/setup-manager.sh"
        ;;
    sites-add)
        docker exec -it newspack_dev sh -c "/var/scripts/sites-add.sh ${@:2}"
        ;;
    sites-list)
        docker exec -it newspack_dev sh -c "/var/scripts/sites-list.sh ${@:2}"
        ;;
    sites-drop)
        docker exec -it newspack_dev sh -c "/var/scripts/sites-drop.sh ${@:2}"
        ;;
    build)
        if [[ -n "$2" ]]; then
            target_folder=$2
        fi
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/build-repos.sh $target_folder"
        ;;
    watch)
        require_target_folder
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/watch-repo.sh $target_folder"
        ;;
    test-php)
        require_target_folder
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/test-php.sh $target_folder ${@:2}"
        ;;
    test-js)
        require_target_folder
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/test-js.sh $target_folder"
        ;;
    composer)
        require_target_folder
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/composer.sh $target_folder ${@:2}"
        ;;
    secrets)
        docker exec -it $USER_COMMAND newspack_dev sh -c "wp eval-file /var/scripts/generate-secrets.php --allow-root"
        ;;
    secrets-import)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/import-secrets.sh"
        ;;
    snapshot)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/snapshot-create.sh $2"
        ;;
    snapshot-load)
        docker exec -it $USER_COMMAND newspack_dev sh -c "/var/scripts/snapshot-load.sh $2"
        ;;
    jncp)
        cmd="/var/scripts/jn-cp.sh ${@:2}"
        docker exec -it $USER_COMMAND newspack_dev $cmd
        ;;
    jninit)
        cmd="/var/scripts/jn-init.sh ${@:2}"
        docker exec -it $USER_COMMAND newspack_dev $cmd
        ;;
    pull)
        for dir in repos/*/; do
        cd "$dir"
        if [ -d ".git" ]; then
            echo "Updating repository: $dir"
            git pull
        fi
        cd ..
        done
        ;;
    *)
        echo Unknown command
        ;;
esac
